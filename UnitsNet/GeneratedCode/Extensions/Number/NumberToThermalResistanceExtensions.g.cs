//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add Extensions\MyQuantityExtensions.cs to decorate quantities with new behavior.
//     Add UnitDefinitions\MyQuantity.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Copyright (c) 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com).
// https://github.com/angularsen/UnitsNet
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

using System;

// Windows Runtime Component does not support extension methods and method overloads: https://msdn.microsoft.com/en-us/library/br230301.aspx
#if !WINDOWS_UWP
namespace UnitsNet.Extensions.NumberToThermalResistance
{
    public static class NumberToThermalResistanceExtensions
    {
        #region HourSquareFeetDegreeFahrenheitPerBtu

        /// <inheritdoc cref="ThermalResistance.FromHourSquareFeetDegreesFahrenheitPerBtu(UnitsNet.QuantityValue)" />
        public static ThermalResistance HourSquareFeetDegreesFahrenheitPerBtu(this int value) => ThermalResistance.FromHourSquareFeetDegreesFahrenheitPerBtu(value);

        /// <inheritdoc cref="ThermalResistance.FromHourSquareFeetDegreesFahrenheitPerBtu(UnitsNet.QuantityValue)" />
        public static ThermalResistance? HourSquareFeetDegreesFahrenheitPerBtu(this int? value) => ThermalResistance.FromHourSquareFeetDegreesFahrenheitPerBtu(value);

        /// <inheritdoc cref="ThermalResistance.FromHourSquareFeetDegreesFahrenheitPerBtu(UnitsNet.QuantityValue)" />
        public static ThermalResistance HourSquareFeetDegreesFahrenheitPerBtu(this long value) => ThermalResistance.FromHourSquareFeetDegreesFahrenheitPerBtu(value);

        /// <inheritdoc cref="ThermalResistance.FromHourSquareFeetDegreesFahrenheitPerBtu(UnitsNet.QuantityValue)" />
        public static ThermalResistance? HourSquareFeetDegreesFahrenheitPerBtu(this long? value) => ThermalResistance.FromHourSquareFeetDegreesFahrenheitPerBtu(value);

        /// <inheritdoc cref="ThermalResistance.FromHourSquareFeetDegreesFahrenheitPerBtu(UnitsNet.QuantityValue)" />
        public static ThermalResistance HourSquareFeetDegreesFahrenheitPerBtu(this double value) => ThermalResistance.FromHourSquareFeetDegreesFahrenheitPerBtu(value);

        /// <inheritdoc cref="ThermalResistance.FromHourSquareFeetDegreesFahrenheitPerBtu(UnitsNet.QuantityValue)" />
        public static ThermalResistance? HourSquareFeetDegreesFahrenheitPerBtu(this double? value) => ThermalResistance.FromHourSquareFeetDegreesFahrenheitPerBtu(value);

        /// <inheritdoc cref="ThermalResistance.FromHourSquareFeetDegreesFahrenheitPerBtu(UnitsNet.QuantityValue)" />
        public static ThermalResistance HourSquareFeetDegreesFahrenheitPerBtu(this float value) => ThermalResistance.FromHourSquareFeetDegreesFahrenheitPerBtu(value);

        /// <inheritdoc cref="ThermalResistance.FromHourSquareFeetDegreesFahrenheitPerBtu(UnitsNet.QuantityValue)" />
        public static ThermalResistance? HourSquareFeetDegreesFahrenheitPerBtu(this float? value) => ThermalResistance.FromHourSquareFeetDegreesFahrenheitPerBtu(value);

        /// <inheritdoc cref="ThermalResistance.FromHourSquareFeetDegreesFahrenheitPerBtu(UnitsNet.QuantityValue)" />
        public static ThermalResistance HourSquareFeetDegreesFahrenheitPerBtu(this decimal value) => ThermalResistance.FromHourSquareFeetDegreesFahrenheitPerBtu(Convert.ToDouble(value));

        /// <inheritdoc cref="ThermalResistance.FromHourSquareFeetDegreesFahrenheitPerBtu(UnitsNet.QuantityValue)" />
        public static ThermalResistance? HourSquareFeetDegreesFahrenheitPerBtu(this decimal? value) => ThermalResistance.FromHourSquareFeetDegreesFahrenheitPerBtu(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region SquareCentimeterHourDegreeCelsiusPerKilocalorie

        /// <inheritdoc cref="ThermalResistance.FromSquareCentimeterHourDegreesCelsiusPerKilocalorie(UnitsNet.QuantityValue)" />
        public static ThermalResistance SquareCentimeterHourDegreesCelsiusPerKilocalorie(this int value) => ThermalResistance.FromSquareCentimeterHourDegreesCelsiusPerKilocalorie(value);

        /// <inheritdoc cref="ThermalResistance.FromSquareCentimeterHourDegreesCelsiusPerKilocalorie(UnitsNet.QuantityValue)" />
        public static ThermalResistance? SquareCentimeterHourDegreesCelsiusPerKilocalorie(this int? value) => ThermalResistance.FromSquareCentimeterHourDegreesCelsiusPerKilocalorie(value);

        /// <inheritdoc cref="ThermalResistance.FromSquareCentimeterHourDegreesCelsiusPerKilocalorie(UnitsNet.QuantityValue)" />
        public static ThermalResistance SquareCentimeterHourDegreesCelsiusPerKilocalorie(this long value) => ThermalResistance.FromSquareCentimeterHourDegreesCelsiusPerKilocalorie(value);

        /// <inheritdoc cref="ThermalResistance.FromSquareCentimeterHourDegreesCelsiusPerKilocalorie(UnitsNet.QuantityValue)" />
        public static ThermalResistance? SquareCentimeterHourDegreesCelsiusPerKilocalorie(this long? value) => ThermalResistance.FromSquareCentimeterHourDegreesCelsiusPerKilocalorie(value);

        /// <inheritdoc cref="ThermalResistance.FromSquareCentimeterHourDegreesCelsiusPerKilocalorie(UnitsNet.QuantityValue)" />
        public static ThermalResistance SquareCentimeterHourDegreesCelsiusPerKilocalorie(this double value) => ThermalResistance.FromSquareCentimeterHourDegreesCelsiusPerKilocalorie(value);

        /// <inheritdoc cref="ThermalResistance.FromSquareCentimeterHourDegreesCelsiusPerKilocalorie(UnitsNet.QuantityValue)" />
        public static ThermalResistance? SquareCentimeterHourDegreesCelsiusPerKilocalorie(this double? value) => ThermalResistance.FromSquareCentimeterHourDegreesCelsiusPerKilocalorie(value);

        /// <inheritdoc cref="ThermalResistance.FromSquareCentimeterHourDegreesCelsiusPerKilocalorie(UnitsNet.QuantityValue)" />
        public static ThermalResistance SquareCentimeterHourDegreesCelsiusPerKilocalorie(this float value) => ThermalResistance.FromSquareCentimeterHourDegreesCelsiusPerKilocalorie(value);

        /// <inheritdoc cref="ThermalResistance.FromSquareCentimeterHourDegreesCelsiusPerKilocalorie(UnitsNet.QuantityValue)" />
        public static ThermalResistance? SquareCentimeterHourDegreesCelsiusPerKilocalorie(this float? value) => ThermalResistance.FromSquareCentimeterHourDegreesCelsiusPerKilocalorie(value);

        /// <inheritdoc cref="ThermalResistance.FromSquareCentimeterHourDegreesCelsiusPerKilocalorie(UnitsNet.QuantityValue)" />
        public static ThermalResistance SquareCentimeterHourDegreesCelsiusPerKilocalorie(this decimal value) => ThermalResistance.FromSquareCentimeterHourDegreesCelsiusPerKilocalorie(Convert.ToDouble(value));

        /// <inheritdoc cref="ThermalResistance.FromSquareCentimeterHourDegreesCelsiusPerKilocalorie(UnitsNet.QuantityValue)" />
        public static ThermalResistance? SquareCentimeterHourDegreesCelsiusPerKilocalorie(this decimal? value) => ThermalResistance.FromSquareCentimeterHourDegreesCelsiusPerKilocalorie(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region SquareCentimeterKelvinPerWatt

        /// <inheritdoc cref="ThermalResistance.FromSquareCentimeterKelvinsPerWatt(UnitsNet.QuantityValue)" />
        public static ThermalResistance SquareCentimeterKelvinsPerWatt(this int value) => ThermalResistance.FromSquareCentimeterKelvinsPerWatt(value);

        /// <inheritdoc cref="ThermalResistance.FromSquareCentimeterKelvinsPerWatt(UnitsNet.QuantityValue)" />
        public static ThermalResistance? SquareCentimeterKelvinsPerWatt(this int? value) => ThermalResistance.FromSquareCentimeterKelvinsPerWatt(value);

        /// <inheritdoc cref="ThermalResistance.FromSquareCentimeterKelvinsPerWatt(UnitsNet.QuantityValue)" />
        public static ThermalResistance SquareCentimeterKelvinsPerWatt(this long value) => ThermalResistance.FromSquareCentimeterKelvinsPerWatt(value);

        /// <inheritdoc cref="ThermalResistance.FromSquareCentimeterKelvinsPerWatt(UnitsNet.QuantityValue)" />
        public static ThermalResistance? SquareCentimeterKelvinsPerWatt(this long? value) => ThermalResistance.FromSquareCentimeterKelvinsPerWatt(value);

        /// <inheritdoc cref="ThermalResistance.FromSquareCentimeterKelvinsPerWatt(UnitsNet.QuantityValue)" />
        public static ThermalResistance SquareCentimeterKelvinsPerWatt(this double value) => ThermalResistance.FromSquareCentimeterKelvinsPerWatt(value);

        /// <inheritdoc cref="ThermalResistance.FromSquareCentimeterKelvinsPerWatt(UnitsNet.QuantityValue)" />
        public static ThermalResistance? SquareCentimeterKelvinsPerWatt(this double? value) => ThermalResistance.FromSquareCentimeterKelvinsPerWatt(value);

        /// <inheritdoc cref="ThermalResistance.FromSquareCentimeterKelvinsPerWatt(UnitsNet.QuantityValue)" />
        public static ThermalResistance SquareCentimeterKelvinsPerWatt(this float value) => ThermalResistance.FromSquareCentimeterKelvinsPerWatt(value);

        /// <inheritdoc cref="ThermalResistance.FromSquareCentimeterKelvinsPerWatt(UnitsNet.QuantityValue)" />
        public static ThermalResistance? SquareCentimeterKelvinsPerWatt(this float? value) => ThermalResistance.FromSquareCentimeterKelvinsPerWatt(value);

        /// <inheritdoc cref="ThermalResistance.FromSquareCentimeterKelvinsPerWatt(UnitsNet.QuantityValue)" />
        public static ThermalResistance SquareCentimeterKelvinsPerWatt(this decimal value) => ThermalResistance.FromSquareCentimeterKelvinsPerWatt(Convert.ToDouble(value));

        /// <inheritdoc cref="ThermalResistance.FromSquareCentimeterKelvinsPerWatt(UnitsNet.QuantityValue)" />
        public static ThermalResistance? SquareCentimeterKelvinsPerWatt(this decimal? value) => ThermalResistance.FromSquareCentimeterKelvinsPerWatt(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region SquareMeterDegreeCelsiusPerWatt

        /// <inheritdoc cref="ThermalResistance.FromSquareMeterDegreesCelsiusPerWatt(UnitsNet.QuantityValue)" />
        public static ThermalResistance SquareMeterDegreesCelsiusPerWatt(this int value) => ThermalResistance.FromSquareMeterDegreesCelsiusPerWatt(value);

        /// <inheritdoc cref="ThermalResistance.FromSquareMeterDegreesCelsiusPerWatt(UnitsNet.QuantityValue)" />
        public static ThermalResistance? SquareMeterDegreesCelsiusPerWatt(this int? value) => ThermalResistance.FromSquareMeterDegreesCelsiusPerWatt(value);

        /// <inheritdoc cref="ThermalResistance.FromSquareMeterDegreesCelsiusPerWatt(UnitsNet.QuantityValue)" />
        public static ThermalResistance SquareMeterDegreesCelsiusPerWatt(this long value) => ThermalResistance.FromSquareMeterDegreesCelsiusPerWatt(value);

        /// <inheritdoc cref="ThermalResistance.FromSquareMeterDegreesCelsiusPerWatt(UnitsNet.QuantityValue)" />
        public static ThermalResistance? SquareMeterDegreesCelsiusPerWatt(this long? value) => ThermalResistance.FromSquareMeterDegreesCelsiusPerWatt(value);

        /// <inheritdoc cref="ThermalResistance.FromSquareMeterDegreesCelsiusPerWatt(UnitsNet.QuantityValue)" />
        public static ThermalResistance SquareMeterDegreesCelsiusPerWatt(this double value) => ThermalResistance.FromSquareMeterDegreesCelsiusPerWatt(value);

        /// <inheritdoc cref="ThermalResistance.FromSquareMeterDegreesCelsiusPerWatt(UnitsNet.QuantityValue)" />
        public static ThermalResistance? SquareMeterDegreesCelsiusPerWatt(this double? value) => ThermalResistance.FromSquareMeterDegreesCelsiusPerWatt(value);

        /// <inheritdoc cref="ThermalResistance.FromSquareMeterDegreesCelsiusPerWatt(UnitsNet.QuantityValue)" />
        public static ThermalResistance SquareMeterDegreesCelsiusPerWatt(this float value) => ThermalResistance.FromSquareMeterDegreesCelsiusPerWatt(value);

        /// <inheritdoc cref="ThermalResistance.FromSquareMeterDegreesCelsiusPerWatt(UnitsNet.QuantityValue)" />
        public static ThermalResistance? SquareMeterDegreesCelsiusPerWatt(this float? value) => ThermalResistance.FromSquareMeterDegreesCelsiusPerWatt(value);

        /// <inheritdoc cref="ThermalResistance.FromSquareMeterDegreesCelsiusPerWatt(UnitsNet.QuantityValue)" />
        public static ThermalResistance SquareMeterDegreesCelsiusPerWatt(this decimal value) => ThermalResistance.FromSquareMeterDegreesCelsiusPerWatt(Convert.ToDouble(value));

        /// <inheritdoc cref="ThermalResistance.FromSquareMeterDegreesCelsiusPerWatt(UnitsNet.QuantityValue)" />
        public static ThermalResistance? SquareMeterDegreesCelsiusPerWatt(this decimal? value) => ThermalResistance.FromSquareMeterDegreesCelsiusPerWatt(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

        #region SquareMeterKelvinPerKilowatt

        /// <inheritdoc cref="ThermalResistance.FromSquareMeterKelvinsPerKilowatt(UnitsNet.QuantityValue)" />
        public static ThermalResistance SquareMeterKelvinsPerKilowatt(this int value) => ThermalResistance.FromSquareMeterKelvinsPerKilowatt(value);

        /// <inheritdoc cref="ThermalResistance.FromSquareMeterKelvinsPerKilowatt(UnitsNet.QuantityValue)" />
        public static ThermalResistance? SquareMeterKelvinsPerKilowatt(this int? value) => ThermalResistance.FromSquareMeterKelvinsPerKilowatt(value);

        /// <inheritdoc cref="ThermalResistance.FromSquareMeterKelvinsPerKilowatt(UnitsNet.QuantityValue)" />
        public static ThermalResistance SquareMeterKelvinsPerKilowatt(this long value) => ThermalResistance.FromSquareMeterKelvinsPerKilowatt(value);

        /// <inheritdoc cref="ThermalResistance.FromSquareMeterKelvinsPerKilowatt(UnitsNet.QuantityValue)" />
        public static ThermalResistance? SquareMeterKelvinsPerKilowatt(this long? value) => ThermalResistance.FromSquareMeterKelvinsPerKilowatt(value);

        /// <inheritdoc cref="ThermalResistance.FromSquareMeterKelvinsPerKilowatt(UnitsNet.QuantityValue)" />
        public static ThermalResistance SquareMeterKelvinsPerKilowatt(this double value) => ThermalResistance.FromSquareMeterKelvinsPerKilowatt(value);

        /// <inheritdoc cref="ThermalResistance.FromSquareMeterKelvinsPerKilowatt(UnitsNet.QuantityValue)" />
        public static ThermalResistance? SquareMeterKelvinsPerKilowatt(this double? value) => ThermalResistance.FromSquareMeterKelvinsPerKilowatt(value);

        /// <inheritdoc cref="ThermalResistance.FromSquareMeterKelvinsPerKilowatt(UnitsNet.QuantityValue)" />
        public static ThermalResistance SquareMeterKelvinsPerKilowatt(this float value) => ThermalResistance.FromSquareMeterKelvinsPerKilowatt(value);

        /// <inheritdoc cref="ThermalResistance.FromSquareMeterKelvinsPerKilowatt(UnitsNet.QuantityValue)" />
        public static ThermalResistance? SquareMeterKelvinsPerKilowatt(this float? value) => ThermalResistance.FromSquareMeterKelvinsPerKilowatt(value);

        /// <inheritdoc cref="ThermalResistance.FromSquareMeterKelvinsPerKilowatt(UnitsNet.QuantityValue)" />
        public static ThermalResistance SquareMeterKelvinsPerKilowatt(this decimal value) => ThermalResistance.FromSquareMeterKelvinsPerKilowatt(Convert.ToDouble(value));

        /// <inheritdoc cref="ThermalResistance.FromSquareMeterKelvinsPerKilowatt(UnitsNet.QuantityValue)" />
        public static ThermalResistance? SquareMeterKelvinsPerKilowatt(this decimal? value) => ThermalResistance.FromSquareMeterKelvinsPerKilowatt(value == null ? (double?)null : Convert.ToDouble(value.Value));

        #endregion

    }
}
#endif
